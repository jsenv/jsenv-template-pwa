{
  "version": 3,
  "file": "app.js",
  "sources": [
    "../../node_modules/@jsenv/pwa/src/internal/listenEvent.js",
    "../../node_modules/@jsenv/pwa/src/listenAppInstalled.js",
    "../../node_modules/@jsenv/pwa/src/displayModeStandalone.js",
    "../../node_modules/@jsenv/pwa/src/add-to-home-screen.js",
    "../../node_modules/@jsenv/pwa/src/navigatorController.js",
    "../../node_modules/@jsenv/pwa/src/internal/createSignal.js",
    "../../node_modules/@jsenv/pwa/src/internal/sendMessageUsingChannel.js",
    "../../src/app/pwa/add_to_home_screen.js",
    "../../src/app/pwa/service_worker.js",
    "../../src/app/pwa/pwa.js",
    "../../src/app/app.js"
  ],
  "sourcesContent": [
    "export const listenEvent = (objectWithEventEmitter, event, callback) => {\n  objectWithEventEmitter.addEventListener(event, callback)\n  return () => {\n    objectWithEventEmitter.removeEventListener(event, callback)\n  }\n}\n",
    "/**\n * - User can decide by himself to install the application from the browser toolbar.\n * - Or application code is allowed to prompt user to do so on a user interaction such\n * as after clicking on a button.\n * In these scenarios when user clicks install on that prompt displayed by the browser,\n * browser dispatch an \"appinstalled\" event.\n */\n\nexport const listenAppInstalled = (callback) => {\n  window.addEventListener(\"appinstalled\", callback)\n  return () => {\n    window.removeEventListener(\"appinstalled\", callback)\n  }\n}\n\n// listenAppInstalled(() => {\n//   document.querySelector(\"#install\").disabled = true\n// })\n",
    "/**\n * displayModeStandalone can be used to know the current displayMode of\n * our web page is standalone (PWA)\n */\n\nexport const displayModeStandalone = {\n  get: () =>\n    window.navigator.standalone ||\n    window.matchMedia(\"(display-mode: standalone)\").matches,\n  listen: (callback) => {\n    const media = window.matchMedia(\"(display-mode: standalone)\")\n    media.addListener(callback)\n    return () => {\n      media.removeListener(callback)\n    }\n  },\n}\n",
    "/**\n  The following scenario is working:\n\n  - user click install button -> browser shows add to home screen prompt\n  - user click cancel on browser prompt\n  - user click again install button -> browser shows again add to home screen prompt\n\n  It's very easy to break this so that subsequent click does nothing.\n  Nothing means browser always returns a \"dimissed\" user choice without asking user.\n  I suspect chrome is trying to prevent malicious script to annoy user\n  by calling prompt() many times.\n\n  It's currently working because we don't hide beforeinstallpromptEvent behind a function.\n  It would be hidden behind a function if we put it into react state or\n  just by using a curried funciton like:\n\n  beforeinstallpromptEvent\n  const curriedFunction = () => {\n    beforeinstallpromptEvent.prompt()\n  }\n\n  If we do so, chrome will always dismiss subsequent click on install button. (until page is reloaded).\n  To avoid that we store the event on window.beforeinstallpromptEvent.\n*/\n\nimport { listenEvent } from \"./internal/listenEvent.js\"\nimport { listenAppInstalled } from \"./listenAppInstalled.js\"\nimport { displayModeStandalone } from \"./displayModeStandalone.js\"\n\nlet appInstalledEvent = false\n\nlistenAppInstalled(() => {\n  // prompt \"becomes\" unavailable if user installs app\n  // it can happen if user installs app manually from browser toolbar\n  // in that case there is no point showing the install\n  // button in the ui\n  appInstalledEvent = true\n})\n\nexport const addToHomescreen = {\n  isAvailable: () => {\n    if (!window.beforeinstallpromptEvent) {\n      return false\n    }\n\n    if (displayModeStandalone.get()) {\n      return false\n    }\n\n    if (appInstalledEvent) {\n      return false\n    }\n\n    return true\n  },\n\n  listenAvailabilityChange: (callback) => {\n    let availablePrevious = addToHomescreen.isAvailable()\n\n    const checkAvailabilityChange = () => {\n      const available = addToHomescreen.isAvailable()\n      if (available !== availablePrevious) {\n        availablePrevious = available\n        callback(available)\n      }\n    }\n\n    const removeBeforeInstallPromptListener = listenBeforeInstallPrompt(\n      (beforeinstallpromptEvent) => {\n        window.beforeinstallpromptEvent = beforeinstallpromptEvent\n        checkAvailabilityChange()\n      },\n    )\n\n    const removeDisplayModeListener = displayModeStandalone.listen(() => {\n      checkAvailabilityChange()\n    })\n\n    const removeAppInstalledListener = listenAppInstalled(() => {\n      // prompt \"becomes\" unavailable if user installs app\n      // it can happen if user installs app manually from browser toolbar\n      // in that case there is no point showing the install\n      // button in the ui\n      appInstalledEvent = true\n      checkAvailabilityChange()\n    })\n\n    return () => {\n      removeBeforeInstallPromptListener()\n      removeDisplayModeListener()\n      removeAppInstalledListener()\n    }\n  },\n\n  prompt: async () => {\n    if (!window.beforeinstallpromptEvent) {\n      console.warn(\n        `cannot prompt add to home screen: window.beforeinstallpromptEvent is missing`,\n      )\n      return false\n    }\n\n    window.beforeinstallpromptEvent.prompt()\n    const choiceResult = await window.beforeinstallpromptEvent.userChoice\n    if (choiceResult.outcome === \"accepted\") {\n      return true\n    }\n    return false\n  },\n}\n\nconst listenBeforeInstallPrompt = (callback) =>\n  listenEvent(window, \"beforeinstallprompt\", callback)\n",
    "// do not forget error handling: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/onerror\n\nimport { createSignal } from \"./internal/createSignal.js\"\nimport { listenEvent } from \"./internal/listenEvent.js\"\nimport { sendMessageUsingChannel } from \"./internal/sendMessageUsingChannel.js\"\n\nconst serviceWorkerAPI = window.navigator.serviceWorker\nlet logEnabled = false\nconst log = (...args) => {\n  if (logEnabled) {\n    console.log(...args)\n  }\n}\n\nexport const enableServiceWorkerLogs = () => {\n  logEnabled = true\n}\n\nexport const canUseServiceWorker =\n  Boolean(serviceWorkerAPI) && document.location.protocol === \"https:\"\n\n// https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration\nlet registrationPromise = null\nlet serviceWorker = null\nconst serviceWorkerSetter = (worker) => {\n  serviceWorker = worker\n}\n\nlet serviceWorkerUpdating = null\nconst serviceWorkerUpdatingChangeSignal = createSignal()\nconst serviceWorkerUpdatingSetter = (worker) => {\n  if (serviceWorkerUpdating && serviceWorkerUpdating === worker) {\n    // we already know about this worker, no need to listen state changes.\n    // it happens for manual updates where we bot detect it\n    // from registration.update() return value\n    // and \"updatefound\" event\n    log(\"we already know this worker is updating\")\n    return\n  }\n  if (worker) {\n    log(`found a worker updating (worker state is: ${worker.state})`)\n  } else {\n    log(`worker update is done`)\n  }\n  serviceWorkerUpdating = worker\n  serviceWorkerUpdatingChangeSignal.emit()\n}\n\nexport const serviceWorkerIsAvailable = () => Boolean(registrationPromise)\n\nexport const registerServiceWorker = (url, options) => {\n  if (!canUseServiceWorker) {\n    return () => {}\n  }\n\n  let unregistered = false\n  let unregister = () => {}\n  let removeUpdateFoundListener = () => {}\n\n  registrationPromise = serviceWorkerAPI.register(url, options)\n  ;(async () => {\n    const registration = await registrationPromise\n    unregister = () => {\n      registration.unregister()\n    }\n\n    if (unregistered) {\n      unregister()\n      return\n    }\n\n    const { installing, waiting, active } = registration\n    serviceWorkerSetter(installing || waiting || active)\n    removeUpdateFoundListener = listenEvent(registration, \"updatefound\", () => {\n      log(\"browser notifies use an worker is installing\")\n      if (registration.installing === installing) {\n        log(`it's not an worker update, it's first time worker registers`)\n        return\n      }\n      serviceWorkerUpdatingSetter(registration.installing)\n    })\n  })()\n\n  return () => {\n    unregistered = true\n    removeUpdateFoundListener()\n    unregister()\n  }\n}\n\n// export const getServiceWorkerState = () => {\n//   if (serviceWorker) {\n//     return serviceWorker.state\n//   }\n//   return null\n// }\n\n// export const listenServiceWorkerState = (callback) => {\n//   let removeStateChangeListener = () => {}\n//   const removeWorkerChangeListener = serviceWorkerChangeSignal.listen(() => {\n//     callback()\n//     removeStateChangeListener = listenEvent(serviceWorker, \"statechange\", callback)\n//   })\n//   return () => {\n//     removeWorkerChangeListener()\n//     removeStateChangeListener()\n//   }\n// }\n\n/*\n * sendMessageToServiceWorker communicates with the current service worker.\n *\n * As soon as a new worker is activating, the current service worker\n * becomes the new one and sendMessageToServiceWorker communicate with it.\n * This is because browser kills the old service worker as soon as a new worker\n * version starts to activate\n */\nexport const sendMessageToServiceWorker = (message) => {\n  if (!serviceWorker) {\n    console.warn(`no service worker to send message to`)\n    return undefined\n  }\n  return sendMessageUsingChannel(serviceWorker, message)\n}\n\nexport const getServiceWorkerUpdate = () => {\n  return serviceWorkerUpdating\n    ? {\n        shouldBecomeNavigatorController: Boolean(serviceWorkerAPI.controller),\n        navigatorWillReload: autoReloadEnabled,\n      }\n    : null\n}\n\nexport const listenServiceWorkerUpdate = (callback) => {\n  return serviceWorkerUpdatingChangeSignal.listen(callback)\n}\n\nexport const checkServiceWorkerUpdate = async () => {\n  if (!registrationPromise) {\n    console.warn(\n      `registerServiceWorker must be called before checkServiceWorkerUpdate can be used`,\n    )\n    return false\n  }\n\n  const registration = await registrationPromise\n  // await for the registration promise above can take some time\n  // especially when the service worker is installing for the first time\n  // because it is fetching a lot of urls to put into cache.\n  // In that scenario we might want to display something different ?\n  // Without this UI seems to take ages to check for an update\n  const updateRegistration = await registration.update()\n\n  const { installing } = updateRegistration\n  if (installing) {\n    log(\"installing worker found after calling update()\")\n    serviceWorkerUpdatingSetter(installing)\n    return true\n  }\n\n  const { waiting } = updateRegistration\n  if (waiting) {\n    log(\"waiting worker found after calling update()\")\n    serviceWorkerUpdatingSetter(waiting)\n    return true\n  }\n\n  log(\"no worker found after calling update()\")\n  return false\n}\n\nexport const sendMessageToServiceWorkerUpdate = (message) => {\n  if (!serviceWorkerUpdating) {\n    console.warn(`no service worker updating to send message to`)\n    return undefined\n  }\n  return sendMessageUsingChannel(serviceWorkerUpdating, message)\n}\n\nexport const activateServiceWorkerUpdate = async (params) => {\n  if (!serviceWorkerUpdating) {\n    throw new Error(\"no service worker update to activate\")\n  }\n  return sendSkipWaitingToWorker(serviceWorkerUpdating, params)\n}\n\nconst sendSkipWaitingToWorker = async (\n  worker,\n  {\n    onActivating = () => {},\n    onActivated = () => {},\n    onBecomesNavigatorController = () => {},\n  } = {},\n) => {\n  const { state } = worker\n  const waitUntilActivated = () => {\n    return new Promise((resolve) => {\n      const removeStateChangeListener = listenEvent(\n        worker,\n        \"statechange\",\n        () => {\n          if (worker.state === \"activating\") {\n            serviceWorkerSetter(serviceWorkerUpdating)\n            onActivating()\n          }\n          if (worker.state === \"activated\") {\n            serviceWorkerSetter(serviceWorkerUpdating)\n            onActivated()\n            removeStateChangeListener()\n            resolve()\n          }\n        },\n      )\n    })\n  }\n\n  // worker must be waiting (meaning state must be \"installed\")\n  // to be able to call skipWaiting on it.\n  // If it's installing it's an error.\n  // If it's activating, we'll just skip the skipWaiting call\n  // If it's activated, we'll just return early\n  if (state === \"installed\" || state === \"activating\") {\n    if (state === \"installed\") {\n      sendMessageToServiceWorkerUpdate({ action: \"skipWaiting\" })\n    }\n    if (state === \"activating\") {\n      serviceWorkerSetter(serviceWorkerUpdating)\n    }\n    await waitUntilActivated()\n\n    if (serviceWorkerAPI.controller) {\n      const removeControllerChangeListener = listenEvent(\n        serviceWorkerAPI,\n        \"controllerchange\",\n        () => {\n          removeControllerChangeListener()\n          onBecomesNavigatorController()\n          serviceWorkerUpdatingSetter(null)\n          if (autoReloadEnabled) reload()\n        },\n      )\n    } else {\n      serviceWorkerUpdatingSetter(null)\n      if (autoReloadEnabled) reload()\n    }\n    return\n  }\n\n  serviceWorkerSetter(serviceWorkerUpdating)\n  onBecomesNavigatorController()\n  serviceWorkerUpdatingSetter(null)\n  if (autoReloadEnabled) reload()\n}\n\nlet autoReloadEnabled = true\nlet disableAutoReload = () => {}\nexport const autoReloadAfterUpdateIsEnabled = () => autoReloadEnabled\nexport const disableAutoReloadAfterUpdate = () => disableAutoReload()\n\nlet refreshing = false\nconst reload = () => {\n  if (refreshing) {\n    return\n  }\n  refreshing = true\n  window.location.reload()\n}\n\nif (canUseServiceWorker) {\n  const removeControllerChangeListener = listenEvent(\n    serviceWorkerAPI,\n    \"controllerchange\",\n    reload,\n  )\n\n  disableAutoReload = () => {\n    autoReloadEnabled = false\n    removeControllerChangeListener()\n  }\n}\n\n// const navigatorIsControlledByAServiceWorker = () => {\n//   return canUseServiceWorker ? Boolean(serviceWorkerAPI.controller) : false\n// }\n\n// const getServiceWorkerControllingNavigator = () => {\n//   return navigatorIsControlledByAServiceWorker() ? serviceWorkerAPI.controller : null\n// }\n",
    "export const createSignal = () => {\n  let listeners = []\n\n  const listen = (callback, { once = false } = {}) => {\n    if (once) {\n      const callbackOriginal = callback\n      callback = (...args) => {\n        stopListening()\n        callbackOriginal(...args)\n      }\n    }\n\n    listeners = [...listeners, callback]\n\n    let removed = false\n    const stopListening = () => {\n      if (removed) return\n      removed = true\n      const listenersWithoutCallback = []\n      let i = listeners.length\n      let searching = true\n      while (i--) {\n        const listenerCandidate = listeners[i]\n        if (searching) {\n          if (listenerCandidate === callback) {\n            searching = false\n          } else {\n            listenersWithoutCallback.push(listenerCandidate)\n          }\n        } else {\n          listenersWithoutCallback.push(listenerCandidate)\n        }\n      }\n      listeners = listenersWithoutCallback\n    }\n    return stopListening\n  }\n\n  const emit = (...args) => {\n    listeners.forEach((listener) => {\n      listener(...args)\n    })\n  }\n\n  return {\n    listen,\n    emit,\n  }\n}\n",
    "// https://felixgerschau.com/how-to-communicate-with-service-workers/\nexport const sendMessageUsingChannel = (objectWithPostMessage, message) => {\n  const { port1, port2 } = new MessageChannel()\n  return new Promise((resolve, reject) => {\n    port1.onmessage = function (event) {\n      if (event.data.status === \"rejected\") {\n        reject(event.data.value)\n      } else {\n        resolve(event.data.value)\n      }\n    }\n    objectWithPostMessage.postMessage(message, [port2])\n  })\n}\n",
    "import { addToHomescreen } from \"@jsenv/pwa\"\n\nexport const initAddToHomeScreen = (app) => {\n  const buttonAddToHomescreen = document.createElement(\"button\")\n  buttonAddToHomescreen.disabled = !addToHomescreen.isAvailable()\n  buttonAddToHomescreen.innerHTML = \"Add to home screen\"\n  app.appendChild(buttonAddToHomescreen)\n\n  buttonAddToHomescreen.onclick = () => {\n    addToHomescreen.prompt()\n  }\n  addToHomescreen.listenAvailabilityChange(() => {\n    buttonAddToHomescreen.disabled = !addToHomescreen.isAvailable()\n  })\n}\n",
    "import {\n  canUseServiceWorker,\n  registerServiceWorker,\n  getServiceWorkerUpdate,\n  listenServiceWorkerUpdate,\n  checkServiceWorkerUpdate,\n  activateServiceWorkerUpdate,\n} from \"@jsenv/pwa\"\n\nconst serviceWorkerUrl = new URL(\"/src/service_worker.js\", import.meta.url)\n\nexport const initServiceWorker = (app) => {\n  if (!canUseServiceWorker) {\n    return\n  }\n\n  // wait a bit that browser is less busy to register the service worker\n  const callLater = window.requestIdleCallback || requestAnimationFrame\n  callLater(() => {\n    registerServiceWorker(serviceWorkerUrl)\n  })\n\n  installServiceWorkerUpdateUI(app)\n}\n\nconst installServiceWorkerUpdateUI = (app) => {\n  const buttonCheckUpdate = document.createElement(\"button\")\n  buttonCheckUpdate.innerHTML = \"Check update\"\n  const paragraph = document.createElement(\"p\")\n  app.appendChild(buttonCheckUpdate)\n  app.appendChild(paragraph)\n\n  buttonCheckUpdate.onclick = async () => {\n    buttonCheckUpdate.disabled = true\n    paragraph.innerHTML = \"checking for update\"\n    const found = await checkServiceWorkerUpdate()\n\n    if (found) {\n      // when update is found, we already know from listenServiceWorkerUpdate\n    } else {\n      buttonCheckUpdate.disabled = false\n      paragraph.innerHTML = \"No update available\"\n    }\n  }\n\n  listenServiceWorkerUpdate(() => {\n    const available = Boolean(getServiceWorkerUpdate())\n    if (available) {\n      paragraph.innerHTML = `Update available <button>Activate update</button>`\n      paragraph.querySelector(\"button\").onclick = async () => {\n        paragraph.querySelector(\"button\").disabled = true\n        await activateServiceWorkerUpdate()\n      }\n    } else {\n      paragraph.innerHTML = \"\"\n    }\n  })\n}\n",
    "import { initAddToHomeScreen } from \"./add_to_home_screen.js\"\nimport { initServiceWorker } from \"./service_worker.js\"\n\nexport const initPwa = (app) => {\n  initAddToHomeScreen(app)\n  initServiceWorker(app)\n}\n",
    "/**\n * The actual app UI, very simplified of course\n */\n\nimport { initPwa } from \"root/src/app/pwa/pwa.js\"\nimport { greet } from \"root/src/app/greet.js\"\n\nconst app = document.querySelector(\"#app\")\n\nexport const render = () => {\n  const logoUrl = new URL(\"../logo.png\", import.meta.url)\n\n  app.innerHTML = `\n<img src=${logoUrl} width=\"64\" height=\"64\" alt=\"jsenv logo\" />\n<p>${greet()}</p>`\n\n  initPwa(app)\n}\n"
  ],
  "names": [
    "listenEvent",
    "objectWithEventEmitter",
    "event",
    "callback",
    "addEventListener",
    "removeEventListener",
    "listenAppInstalled",
    "window",
    "displayModeStandalone",
    "navigator",
    "standalone",
    "matchMedia",
    "matches",
    "media",
    "addListener",
    "removeListener",
    "appInstalledEvent",
    "addToHomescreen",
    "isAvailable",
    "beforeinstallpromptEvent",
    "listenAvailabilityChange",
    "availablePrevious",
    "checkAvailabilityChange",
    "available",
    "removeBeforeInstallPromptListener",
    "listenBeforeInstallPrompt",
    "removeDisplayModeListener",
    "removeAppInstalledListener",
    "prompt",
    "async",
    "console",
    "warn",
    "userChoice",
    "outcome",
    "serviceWorkerAPI",
    "serviceWorker",
    "canUseServiceWorker",
    "Boolean",
    "document",
    "location",
    "protocol",
    "registrationPromise",
    "serviceWorkerUpdating",
    "serviceWorkerUpdatingChangeSignal",
    "listeners",
    "listen",
    "once",
    "callbackOriginal",
    "args",
    "stopListening",
    "removed",
    "listenersWithoutCallback",
    "i",
    "length",
    "searching",
    "listenerCandidate",
    "push",
    "emit",
    "forEach",
    "listener",
    "createSignal",
    "serviceWorkerUpdatingSetter",
    "worker",
    "state",
    "sendMessageToServiceWorkerUpdate",
    "message",
    "objectWithPostMessage",
    "port1",
    "port2",
    "MessageChannel",
    "Promise",
    "resolve",
    "reject",
    "onmessage",
    "data",
    "status",
    "value",
    "postMessage",
    "sendMessageUsingChannel",
    "sendSkipWaitingToWorker",
    "onActivating",
    "onActivated",
    "onBecomesNavigatorController",
    "reload",
    "action",
    "removeStateChangeListener",
    "controller",
    "removeControllerChangeListener",
    "autoReloadEnabled",
    "refreshing",
    "serviceWorkerUrl",
    "initServiceWorker",
    "app",
    "requestIdleCallback",
    "requestAnimationFrame",
    "url",
    "options",
    "unregistered",
    "unregister",
    "removeUpdateFoundListener",
    "register",
    "registration",
    "installing",
    "waiting",
    "active",
    "registerServiceWorker",
    "installServiceWorkerUpdateUI",
    "buttonCheckUpdate",
    "createElement",
    "innerHTML",
    "paragraph",
    "appendChild",
    "onclick",
    "disabled",
    "updateRegistration",
    "update",
    "checkServiceWorkerUpdate",
    "shouldBecomeNavigatorController",
    "navigatorWillReload",
    "querySelector",
    "Error",
    "params",
    "activateServiceWorkerUpdate",
    "initPwa",
    "buttonAddToHomescreen",
    "initAddToHomeScreen",
    "logoUrl"
  ],
  "mappings": "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"
}