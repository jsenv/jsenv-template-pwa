{
  "version": 3,
  "sources": [
    "../../src/app_loader/app_loader_utils.js",
    "../../src/app_loader/app_loader.js"
  ],
  "names": [
    "injectCSS",
    "cssUrl",
    "crossOrigin",
    "Promise",
    "resolve",
    "reject",
    "link",
    "document",
    "createElement",
    "rel",
    "onload",
    "onerror",
    "href",
    "head",
    "appendChild",
    "nextIDLEPromise",
    "window",
    "requestIdleCallback",
    "e",
    "arguments",
    "length",
    "n",
    "timeout",
    "requestAnimationFrame",
    "o",
    "value",
    "then",
    "direct",
    "i",
    "f",
    "args",
    "apply",
    "this",
    "u",
    "s",
    "body",
    "result",
    "c",
    "recover",
    "a",
    "updateSplashscreenText",
    "appLoaderCssPromise",
    "loadCSSAndFonts",
    "System",
    "onCssReady",
    "onFontsReady",
    "appPromise",
    "importApp",
    "onJsReady",
    "appCSSPromise",
    "setTimeout",
    "app",
    "render",
    "r",
    "l",
    "loadedPromise",
    "_async",
    "fonts",
    "ready",
    "race",
    "t",
    "module"
  ],
  "mappings": "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",
  "sourcesContent": [
    "export const injectCSS = (cssUrl, { crossOrigin } = {}) => {\n  return new Promise((resolve, reject) => {\n    const link = document.createElement(\"link\")\n    link.rel = \"stylesheet\"\n    link.onload = resolve\n    link.onerror = reject\n    link.href = cssUrl\n    link.crossOrigin = crossOrigin\n    document.head.appendChild(link)\n  })\n}\n\nexport const nextIDLEPromise = window.requestIdleCallback\n  ? ({ timeout = 60 } = {}) => {\n      return new Promise((resolve) => {\n        window.requestIdleCallback(resolve, { timeout })\n      })\n    }\n  : () => {\n      return new Promise((resolve) => {\n        window.requestAnimationFrame(resolve)\n      })\n    }\n",
    "/**\n * This is where you can orchestrate the loading of your application\n */\n\nimport { DEV } from \"#env\"\nimport { injectCSS, nextIDLEPromise } from \"./app_loader_utils.js\"\n\nexport const loadApp = async ({ updateSplashscreenText }) => {\n  if (DEV) {\n    performance.measure(`loading app`)\n  }\n\n  // try to load CSS + get the main fonts before displaying any text\n  // to avoid font swapping if possible\n  // give max 400ms for this\n  const appLoaderCssPromise = loadCSSAndFonts(\n    new URL(\"./app_loader.css\", import.meta.url),\n    {\n      timeout: 400,\n      onCssReady: () => {\n        if (DEV) {\n          performance.measure(`app_loader.css ready`)\n        }\n      },\n      onFontsReady: () => {\n        if (DEV) {\n          performance.measure(`fonts ready`)\n        }\n      },\n    },\n  )\n  // start importing app right away\n  const appPromise = importApp({\n    onJsReady: () => {\n      if (DEV) {\n        performance.measure(\"app.js ready\")\n      }\n    },\n  })\n  const appCSSPromise = loadCSSAndFonts(\n    new URL(\"../app/app.css\", import.meta.url),\n    {\n      onCssReady: () => {\n        if (DEV) {\n          performance.measure(`app.css ready`)\n        }\n      },\n    },\n  )\n\n  await appLoaderCssPromise\n  await updateSplashscreenText(`Loading banana...`)\n  if (DEV) {\n    performance.measure(`\"loading bannana...\" displayed`)\n  }\n  await new Promise((resolve) => {\n    setTimeout(resolve, 800)\n  })\n\n  updateSplashscreenText(`Loading gorilla...`)\n  if (DEV) {\n    performance.measure(`\"loading gorilla...\" displayed`)\n  }\n  await new Promise((resolve) => {\n    setTimeout(resolve, 1000)\n  })\n\n  updateSplashscreenText(`Loading the entire jungle...`)\n  if (DEV) {\n    performance.measure(`\"entire jungle...\" displayed`)\n  }\n  await new Promise((resolve) => {\n    setTimeout(resolve, 1200)\n  })\n\n  const app = await appPromise\n  if (DEV) {\n    performance.measure(`rendering app`)\n  }\n  app.render()\n  await appCSSPromise\n  // app.render() can be very expensive so we wait a bit\n  // to let navigator an opportunity to cooldown\n  // This should help to save battery power and RAM\n  await nextIDLEPromise()\n  if (DEV) {\n    performance.measure(`app rendered`)\n  }\n}\n\nconst loadCSSAndFonts = async (\n  cssUrl,\n  { timeout = 1000, onCssReady = () => {}, onFontsReady = () => {} } = {},\n) => {\n  const loadedPromise = (async () => {\n    try {\n      await injectCSS(cssUrl)\n      onCssReady()\n      if (onFontsReady) {\n        await document.fonts.ready\n        onFontsReady()\n      }\n    } catch (e) {\n      return\n    }\n  })()\n  return Promise.race([\n    loadedPromise,\n    new Promise((resolve) => {\n      setTimeout(resolve, timeout)\n    }),\n  ])\n}\n\nconst importApp = async ({ onJsReady = () => {} }) => {\n  const app = await import(\"../app/app.js\")\n  onJsReady()\n  return app\n}\n"
  ]
}