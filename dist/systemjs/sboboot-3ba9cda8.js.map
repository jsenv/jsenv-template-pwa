{
  "version": 3,
  "sources": [
    "../../src/boot/boot.js"
  ],
  "names": [
    "_e",
    "r",
    "body",
    "then",
    "direct",
    "result",
    "Promise",
    "resolve",
    "e",
    "reject",
    "n",
    "f",
    "args",
    "i",
    "arguments",
    "length",
    "apply",
    "this",
    "o",
    "value",
    "window",
    "splashscreen",
    "takeOver",
    "appIsReady",
    "appNode",
    "document",
    "querySelector",
    "splashscreenNode",
    "boot",
    "bootStartMs",
    "Date",
    "now",
    "splashIsVisible",
    "splashout",
    "setAttribute",
    "setTimeout",
    "killSplashscreen",
    "removeAttribute",
    "style",
    "display",
    "splashInTimeout",
    "bootingIsSlowTimeout",
    "setBootingState",
    "clearTimeout",
    "splashInMs",
    "msEllapsedSinceSplashIn",
    "msToWaitToPreventBlink",
    "recover",
    "loadApp",
    "_call",
    "module",
    "error",
    "errorStack",
    "stack",
    "nextBootingState",
    "data",
    "splashscreenMessageNode",
    "innerHTML",
    "variantModel",
    "variantInstance",
    "cloneNode",
    "replaceNodeVariables",
    "appendChild",
    "node",
    "nodeName",
    "Array",
    "from",
    "childNodes",
    "forEach",
    "textContent",
    "replace",
    "_",
    "key",
    "hasOwnProperty",
    "browserIsSupported"
  ],
  "mappings": "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",
  "sourcesContent": [
    "// TODO: explain this file\n\nimport { DEV } from \"#env\"\n\nif (DEV) {\n  const { injectDevRibbon } = await import(\"./dev_ribbon.js\")\n  injectDevRibbon()\n}\n\nconst splashscreen = {\n  /*\n   * takeOver is implemented later in this script.\n   * takeOver is meant to be called by code that want to take responsability\n   * of what is displayed in the splashscreen\n   *\n   * It is used by boot/boot.js once it starts to render a different UI in the splashscreen\n   */\n  takeOver: () => {},\n  /*\n   * appIsReady is implemented later in this script.\n   * appIsReady is meant to be called once:\n   * - Code has rendered html inside <div id=\"app\"></div>\n   * - This html is ready to be displayed (css ands fonts loaded for example)\n   *\n   * It is used by app/app.js once it has rendered the HTML and font is loaded\n   */\n  appIsReady: () => {},\n}\nwindow.splashscreen = splashscreen\n\n// When it take more than \"BOOTING_SLOW\"ms for code to call window.splashscreen.takeOver()\n// splashscreen displays <div id=\"booting_is_slow\"> content\nconst BOOTING_SLOW = 2500\n// When it takes less than \"SPLASHIN_DELAY\"ms for code to call window.splashscreen.appIsReady()\n// we won't even show the splashscreen (happens on user second visit because everything is in browser cache)\nconst SPLASHIN_DELAY = 300\n// When less than \"SPLASHOUT_MIN_INTERVAL\"ms have ellapsed since splashin animation started\n// we will ensure \"SPLASHOUT_MIN_INTERVAL\"ms ellapses before playing the splashout animation\n// This is to prevent a disturbing blink when code calls window.splashscreen.appIsReady() just after\n// splashin animation\nconst SPLASHOUT_MIN_INTERVAL = 650\n\nconst appNode = document.querySelector(\"#app\")\nconst splashscreenNode = document.querySelector(\"#splashscreen\")\n\nconst BOOTING_START = \"booting_start\"\nconst BOOTING_IS_SLOW = \"booting_is_slow\"\nconst BOOTING_ERROR = \"booting_error\"\n\nconst boot = async () => {\n  const bootStartMs = Date.now()\n\n  let splashIsVisible = false\n  const splashin = () => {\n    splashscreenNode.setAttribute(\"data-splashin\", \"\")\n    splashIsVisible = true\n  }\n\n  const splashout = async () => {\n    splashscreenNode.setAttribute(\"data-splashout\", \"\")\n    await new Promise((resolve) => {\n      setTimeout(() => {\n        splashIsVisible = false\n        resolve()\n      }, 300)\n    })\n  }\n\n  const killSplashscreen = () => {\n    appNode.removeAttribute(\"data-booting\")\n    // Here splashscreen is \"killed\" with display: 'none' but it could also\n    // be removed from the DOM\n    splashscreenNode.style.display = \"none\"\n    splashIsVisible = false\n  }\n\n  const splashInTimeout = setTimeout(splashin, SPLASHIN_DELAY)\n\n  const bootingIsSlowTimeout = setTimeout(() => {\n    setBootingState(BOOTING_IS_SLOW)\n  }, BOOTING_SLOW)\n\n  window.splashscreen.takeOver = () => {\n    clearTimeout(bootingIsSlowTimeout)\n  }\n\n  window.splashscreen.appIsReady = async () => {\n    clearTimeout(splashInTimeout)\n    clearTimeout(bootingIsSlowTimeout)\n\n    if (!splashIsVisible) {\n      // app was super fast to load, splashscreen was not even displayed, cool\n      killSplashscreen()\n      return\n    }\n\n    const splashInMs = bootStartMs + SPLASHIN_DELAY\n    const msEllapsedSinceSplashIn = Date.now() - splashInMs\n\n    if (msEllapsedSinceSplashIn < SPLASHOUT_MIN_INTERVAL) {\n      const msToWaitToPreventBlink =\n        SPLASHOUT_MIN_INTERVAL - msEllapsedSinceSplashIn\n      await new Promise((resolve) => {\n        setTimeout(resolve, msToWaitToPreventBlink)\n      })\n    }\n\n    // Wait the end of the \"splashout\" animation before killing splashscreen entirely\n    await splashout()\n    killSplashscreen()\n  }\n\n  try {\n    setBootingState(BOOTING_START)\n    const { loadApp } = await import(\"../app_loader/app_loader.js\")\n    await loadApp()\n  } catch (error) {\n    clearTimeout(bootingIsSlowTimeout)\n\n    setBootingState(BOOTING_ERROR, {\n      errorStack:\n        error.stack ||\n        `<No stack associated with this error> (Check devtools to get more info)`,\n    })\n    throw error\n  }\n}\n\nconst setBootingState = (nextBootingState, data = {}) => {\n  const splashscreenMessageNode = document.querySelector(\n    \"#splashscreen_message\",\n  )\n  splashscreenMessageNode.innerHTML = \"\"\n  const variantModel = document.querySelector(`#${nextBootingState}`)\n  const variantInstance = variantModel.cloneNode(true)\n\n  replaceNodeVariables(variantInstance, data)\n  splashscreenMessageNode.appendChild(variantInstance)\n}\n\nconst replaceNodeVariables = (node, data) => {\n  if (node.nodeName === \"#text\") {\n    node.textContent = node.textContent.replace(/\\${(\\w*)}/g, (_, key) => {\n      return data.hasOwnProperty(key) ? data[key] : \"\"\n    })\n    return\n  }\n\n  Array.from(node.childNodes).forEach((node) => {\n    replaceNodeVariables(node, data)\n  })\n}\n\nif (window.browserIsSupported) {\n  await boot()\n}\n"
  ]
}