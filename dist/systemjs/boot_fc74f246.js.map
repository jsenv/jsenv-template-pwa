{
  "version": 3,
  "file": "boot.js",
  "sources": [
    "../../src/boot/boot.js"
  ],
  "sourcesContent": [
    "/*\n * This file is inlined in the HTML file by [data-jsenv-force-inline]\n * Responsabilities:\n * - inject the dev ribbon in development mode\n * - Dynamic import of \"app_loader.js\" (fetch+parse+execute)\n *   - Catch error during the dynamic import\n *   - Display splashscreen during this dynamic import\n * - Call loadApp exported by \"app_loader.js\"\n *   - Provide an updateSplashscreenText\n *   - Hide splashscreen once app is ready to be displayed\n */\n\nimport { DEV } from \"#env\"\n\n// When it take more than \"BOOTING_SLOW\"ms for loadApp to resolve or call updateSplashscreenText\n// -> splashscreen displays <div id=\"booting_is_slow\"> content\nconst BOOTING_SLOW = 2500\n// When it takes less than \"SPLASHIN_DELAY\"ms for loadApp to resolve\n// -> we won't even show the splashscreen (happens on user second visit because everything is in browser cache)\nconst SPLASHIN_DELAY = 300\n// When less than \"SPLASHOUT_MIN_INTERVAL\"ms have ellapsed since splashin animation started\n// -> code ensures \"SPLASHOUT_MIN_INTERVAL\"ms ellapses before playing the splashout animation\n// This is to prevent a disturbing blink when loadApp resolves shortly after splashin animation\nconst SPLASHOUT_MIN_INTERVAL = 650\n\nconst appNode = document.querySelector(\"#app\")\nconst splashscreenNode = document.querySelector(\"#splashscreen\")\n\nconst BOOTING_START = \"booting_start\"\nconst BOOTING_IS_SLOW = \"booting_is_slow\"\nconst BOOTING_ERROR = \"booting_error\"\n\nconst boot = async () => {\n  if (DEV) {\n    performance.measure(`booting app`)\n  }\n\n  const bootStartMs = Date.now()\n\n  let splashIsVisible = false\n  const splashin = () => {\n    splashscreenNode.setAttribute(\"data-splashin\", \"\")\n    splashIsVisible = true\n  }\n\n  const splashout = async () => {\n    splashscreenNode.setAttribute(\"data-splashout\", \"\")\n    await new Promise((resolve) => {\n      setTimeout(() => {\n        splashIsVisible = false\n        resolve()\n      }, 300)\n    })\n  }\n\n  const killSplashscreen = () => {\n    // Here splashscreen is \"killed\" with display: 'none' but it could also\n    // be removed from the DOM\n    splashscreenNode.style.display = \"none\"\n    splashIsVisible = false\n    if (DEV) {\n      performance.measure(`app displayed`)\n    }\n  }\n\n  const splashInTimeout = setTimeout(splashin, SPLASHIN_DELAY)\n\n  const bootingIsSlowTimeout = setTimeout(() => {\n    setBootingState(BOOTING_IS_SLOW)\n  }, BOOTING_SLOW)\n\n  try {\n    setBootingState(BOOTING_START)\n    const { loadApp } = await import(\"../app_loader/app_loader.js\")\n    await loadApp({\n      updateSplashscreenText: (message) => {\n        clearTimeout(bootingIsSlowTimeout)\n        const splashscreenMessageNode = document.querySelector(\n          \"#splashscreen_message\",\n        )\n        splashscreenMessageNode.innerHTML = message\n      },\n    })\n\n    clearTimeout(splashInTimeout)\n    clearTimeout(bootingIsSlowTimeout)\n\n    if (!splashIsVisible) {\n      appNode.removeAttribute(\"data-booting\")\n      // app was super fast to load, splashscreen was not even displayed, cool\n      killSplashscreen()\n      return\n    }\n\n    const splashInMs = bootStartMs + SPLASHIN_DELAY\n    const msEllapsedSinceSplashIn = Date.now() - splashInMs\n\n    if (msEllapsedSinceSplashIn < SPLASHOUT_MIN_INTERVAL) {\n      const msToWaitToPreventBlink =\n        SPLASHOUT_MIN_INTERVAL - msEllapsedSinceSplashIn\n      await new Promise((resolve) => {\n        setTimeout(resolve, msToWaitToPreventBlink)\n      })\n    }\n\n    appNode.removeAttribute(\"data-booting\")\n    // Wait the end of the \"splashout\" animation before killing splashscreen entirely\n    await splashout()\n    killSplashscreen()\n  } catch (error) {\n    clearTimeout(bootingIsSlowTimeout)\n\n    setBootingState(BOOTING_ERROR, {\n      errorStack:\n        error.stack ||\n        `<No stack associated with this error> (Check devtools to get more info)`,\n    })\n    throw error\n  }\n}\n\nconst setBootingState = (nextBootingState, data = {}) => {\n  const splashscreenMessageNode = document.querySelector(\n    \"#splashscreen_message\",\n  )\n  splashscreenMessageNode.innerHTML = \"\"\n  const variantModel = document.querySelector(`#${nextBootingState}`)\n  const variantInstance = variantModel.cloneNode(true)\n\n  replaceNodeVariables(variantInstance, data)\n  splashscreenMessageNode.appendChild(variantInstance)\n}\n\nconst replaceNodeVariables = (node, data) => {\n  if (node.nodeName === \"#text\") {\n    node.textContent = node.textContent.replace(/\\${(\\w*)}/g, (_, key) => {\n      return data.hasOwnProperty(key) ? data[key] : \"\"\n    })\n    return\n  }\n\n  Array.from(node.childNodes).forEach((node) => {\n    replaceNodeVariables(node, data)\n  })\n}\n\nif (window.browserIsSupported) {\n  await boot()\n}\n"
  ],
  "names": [
    "appNode",
    "document",
    "querySelector",
    "splashscreenNode",
    "boot",
    "async",
    "bootStartMs",
    "Date",
    "now",
    "splashIsVisible",
    "killSplashscreen",
    "style",
    "display",
    "splashInTimeout",
    "setTimeout",
    "setAttribute",
    "bootingIsSlowTimeout",
    "setBootingState",
    "loadApp",
    "module",
    "updateSplashscreenText",
    "message",
    "clearTimeout",
    "innerHTML",
    "removeAttribute",
    "splashInMs",
    "msEllapsedSinceSplashIn",
    "msToWaitToPreventBlink",
    "Promise",
    "resolve",
    "splashout",
    "error",
    "errorStack",
    "stack",
    "nextBootingState",
    "data",
    "splashscreenMessageNode",
    "variantInstance",
    "cloneNode",
    "replaceNodeVariables",
    "appendChild",
    "node",
    "nodeName",
    "Array",
    "from",
    "childNodes",
    "forEach",
    "textContent",
    "replace",
    "_",
    "key",
    "hasOwnProperty",
    "window",
    "browserIsSupported"
  ],
  "mappings": "+EAgBA,MASMA,EAAUC,SAASC,cAAc,QACjCC,EAAmBF,SAASC,cAAc,iBAM1CE,EAAOC,gBAKLC,EAAcC,KAAKC,UAErBC,GAAkB,QAgBhBC,EAAmB,KAGvBP,EAAiBQ,MAAMC,QAAU,OACjCH,GAAkB,GAMdI,EAAkBC,YAzBP,KACfX,EAAiBY,aAAa,gBAAiB,IAC/CN,GAAkB,IAvBC,KAgDfO,EAAuBF,YAAW,KACtCG,EAvCoB,qBAbH,UAwDjBA,EA5CkB,uBA6CZC,QAAEA,SAAkBC,SAAO,4BAC3BD,EAAQ,CACZE,uBAAyBC,IACvBC,aAAaN,GACmBf,SAASC,cACvC,yBAEsBqB,UAAYF,KAIxCC,aAAaT,GACbS,aAAaN,IAERP,SACHT,EAAQwB,gBAAgB,qBAExBd,UAIIe,EAAanB,EA3EA,IA4EboB,EAA0BnB,KAAKC,MAAQiB,KAEzCC,EA1EuB,IA0E2B,OAC9CC,EA3EmB,IA4EED,QACrB,IAAIE,SAASC,IACjBf,WAAWe,EAASF,MAIxB3B,EAAQwB,gBAAgB,qBA5DRnB,WAChBF,EAAiBY,aAAa,iBAAkB,UAC1C,IAAIa,SAASC,IACjBf,YAAW,KACTL,GAAkB,EAClBoB,MACC,SAwDCC,GACNpB,IACA,MAAOqB,SACPT,aAAaN,GAEbC,EAlFkB,gBAkFa,CAC7Be,WACED,EAAME,OACL,4EAECF,IAIJd,EAAkB,CAACiB,EAAkBC,EAAO,YAC1CC,EAA0BnC,SAASC,cACvC,yBAEFkC,EAAwBb,UAAY,SAE9Bc,EADepC,SAASC,cAAe,IAAGgC,KACXI,WAAU,GAE/CC,EAAqBF,EAAiBF,GACtCC,EAAwBI,YAAYH,IAGhCE,EAAuB,CAACE,EAAMN,KACZ,UAAlBM,EAAKC,SAOTC,MAAMC,KAAKH,EAAKI,YAAYC,SAASL,IACnCF,EAAqBE,EAAMN,MAP3BM,EAAKM,YAAcN,EAAKM,YAAYC,QAAQ,cAAc,CAACC,EAAGC,IACrDf,EAAKgB,eAAeD,GAAOf,EAAKe,GAAO,MAUhDE,OAAOC,0BACHjD"
}