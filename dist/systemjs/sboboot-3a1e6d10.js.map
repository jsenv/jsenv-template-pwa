{
  "version": 3,
  "sources": [
    "../../src/boot/boot.js",
    "../../node_modules/@jsenv/core/helpers/babel/slicedToArray/slicedToArray.js",
    "../../src/boot/boot.utils.js",
    "../../node_modules/@jsenv/core/helpers/babel/arrayWithHoles/arrayWithHoles.js",
    "../../node_modules/@jsenv/core/helpers/babel/iterableToArrayLimit/iterableToArrayLimit.js",
    "../../node_modules/@jsenv/core/helpers/babel/nonIterableRest/nonIterableRest.js"
  ],
  "names": [
    "f",
    "prepareApp",
    "arr",
    "app",
    "_empty",
    "_await",
    "value",
    "then",
    "direct",
    "Promise",
    "resolve",
    "nextIDLEPromise",
    "window",
    "requestIdleCallback",
    "e",
    "arguments",
    "length",
    "n",
    "timeout",
    "requestAnimationFrame",
    "cssUrl",
    "crossOrigin",
    "reject",
    "link",
    "document",
    "createElement",
    "rel",
    "onload",
    "onerror",
    "href",
    "head",
    "appendChild",
    "URL",
    "System",
    "import",
    "catch",
    "u",
    "fonts",
    "ready",
    "splashscreen",
    "takeOver",
    "updateSplascreenText",
    "message",
    "querySelector",
    "innerHTML",
    "setTimeout",
    "args",
    "i",
    "apply",
    "this",
    "all",
    "module",
    "Array",
    "isArray",
    "_i",
    "Symbol",
    "iterator",
    "_s",
    "_e",
    "_arr",
    "_n",
    "_d",
    "call",
    "next",
    "done",
    "push",
    "err",
    "return",
    "unsupportedIterableToArray",
    "TypeError",
    "nonIterableRest",
    "render",
    "appIsReady"
  ],
  "mappings": "qJAsEuBA,EAhEjBC,ECDUC,EDiCPC,EA0jBOC,EAAT,aA5gBSC,EAAT,SAAgBC,EAAOC,EAAMC,GAAAA,OAC/BA,EACID,EAAOA,EAAKD,GAASA,GAExBA,GAAUA,EAAMC,OACpBD,EAAQG,QAAQC,QAAQJ,IAElBC,EAAOD,EAAMC,KAAKA,GAAQD,IE/ErBK,EAAkBC,OAAOC,oBAClC,WAAA,IAAAC,EAAAC,UAAAC,OAAA,QAAA,IAAAD,UAAA,GAAAA,UAAA,GAAoB,GAAAE,EAAAH,EAAjBI,QAAAA,OAAAA,IAAAA,EAAU,GAAAD,EAAA,OACJ,IAAIR,SAAQ,SAACC,GAClBE,OAAOC,oBAAoBH,EAAS,CAAEQ,QAAAA,QAG1C,WAAA,OACS,IAAIT,SAAQ,SAACC,GAClBE,OAAOO,sBAAsBT,cFkDdV,EAAAA,WAAAA,OAAAA,EEtEE,SAACoB,GAAAA,IAAUC,GAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAgB,IAAhBA,YAAAA,OAC3B,IAAIZ,SAAQ,SAACC,EAASY,GAAAA,IACrBC,EAAOC,SAASC,cAAc,QACpCF,EAAKG,IAAM,aACXH,EAAKI,OAASjB,EACda,EAAKK,QAAUN,EACfC,EAAKM,KAAOT,EACZG,EAAKF,YAAcA,EACnBG,SAASM,KAAKC,YAAYR,MARL,CFOP,IAAIS,IAAIC,OAAAA,QAAAA,6BAAAA,EAAAA,KAAAA,KAAcC,EAAAA,KAAAA,KAAkB,CAAEb,aAAAA,IAAqBc,OAAM,gBAAA,WAAA,OAAAC,EAC/EZ,SAASa,MAAMC,OAAAA,WAGrB1B,OAAO2B,aAAaC,WAAAA,IAEdC,EAAuB,SAACC,GACIlB,SAASmB,cAAc,yBAC/BC,UAAYF,GAAAA,OAGtCD,EAAAA,qBAAAA,EACM,IAAIhC,SAAQ,SAACC,GACjBmC,WAAWnC,EAAS,SAAA,WAAA,OAGtB+B,EAAAA,sBAAAA,EACM,IAAIhC,SAAQ,SAACC,GACjBmC,WAAWnC,EAAS,SAAA,WAAA,OAGtB+B,EAAAA,gCAmEK,SAAuBnC,EAAOE,GAC/BA,OACGF,GAASA,EAAMC,KAAOD,EAAMC,KAAKH,GAAUK,QAAQC,UAFrD,CAlEC,IAAID,SAAQ,SAACC,GACjBmC,WAAWnC,EAAS,uBAxBlBT,EAiEE,WAAA,IACD,IAAI6C,EAAO,GAAIC,EAAI,EAAGA,EAAIhC,UAAUC,OAAQ+B,IAChDD,EAAKC,GAAKhC,UAAUgC,GAAAA,IAAAA,OAGbtC,QAAQC,QAAQV,EAAEgD,MAAMC,KAAMH,IACpC,MAAMhC,GAAAA,OACAL,QAAQa,OAAOR,OAxCHL,QAAQyC,IAAI,CAACjD,IAH1BkD,EAAAA,OAAO,oCAGPhD,GCjCY4C,EAAAA,SEJL7C,GAAAA,GACVkD,MAAMC,QAAQnD,GAAM,OAAOA,EFGZ6C,CAAL7C,MGLD,SAA+BA,EAAK6C,GAAAA,IAU7CO,EACK,MAAPpD,EACI,KACmB,oBAAXqD,QAA0BrD,EAAIqD,OAAOC,WAActD,EAAI,cAAA,GAC3D,MAANoD,EAAAA,CAAAA,IAIAG,EAAIC,EAHJC,EAAO,GACPC,GAAAA,EACAC,GAAAA,EAAK,IAAA,IAGFP,EAAKA,EAAGQ,KAAK5D,KAAQ0D,GAAMH,EAAKH,EAAGS,QAAQC,QAC9CL,EAAKM,KAAKR,EAAGnD,OHdSyC,IGebY,EAAK3C,QAFuC4C,GAAAA,IAIvD,MAAOM,GACPL,GAAAA,EACAH,EAAKQ,EATE,QASFA,IAGEN,GAAsB,MAAhBN,EAAEa,QAAoBb,EAAEa,SAHhCD,QAGgC,GAE/BL,EAAI,MAAMH,GAAAA,OAGXC,GAlCM,CHOQzD,IACrBkE,EAA2BlE,EAHR6C,IAGaA,WAAAA,MIP1B,IAAIsB,UACR,8IJM8BtB,IAChCuB,oIDiCI3D,cACNR,EAAIoE,SACJ3D,OAAO2B,aAAaiC",
  "sourcesContent": [
    "/**\n * This is where you can orchestrate the loading of your application\n */\n\nimport { injectCSS, nextIDLEPromise } from \"./boot.utils.js\"\n\nconst prepareApp = async () => {\n  await injectCSS(new URL(\"./boot.css\", import.meta.url), { crossOrigin: true }).catch(() => {})\n  await document.fonts.ready\n  // window.splashscreen.takeOver() means this code is taking responsability of the splashscreen.\n  // It prevents main.html to display <div id=\"booting_is_slow\"></div> to the user\n  window.splashscreen.takeOver()\n\n  const updateSplascreenText = (message) => {\n    const splashscreenMessageNode = document.querySelector(\"#splashscreen_message\")\n    splashscreenMessageNode.innerHTML = message\n  }\n\n  updateSplascreenText(`Loading banana...`)\n  await new Promise((resolve) => {\n    setTimeout(resolve, 600)\n  })\n\n  updateSplascreenText(`Loading gorilla...`)\n  await new Promise((resolve) => {\n    setTimeout(resolve, 800)\n  })\n\n  updateSplascreenText(`Loading the entire jungle...`)\n  await new Promise((resolve) => {\n    setTimeout(resolve, 1200)\n  })\n}\n\nconst loadApp = () => {\n  return import(\"../app/app.js\")\n}\n\nconst [, app] = await Promise.all([prepareApp(), loadApp()])\n// app.render() can be very expensive so we wait a bit\n// to let navigator an opportunity to cooldown.\n// This should help to save battery power and RAM\nawait nextIDLEPromise()\napp.render()\nwindow.splashscreen.appIsReady()\n",
    "import arrayWithHoles from \"../arrayWithHoles/arrayWithHoles.js\"\nimport iterableToArrayLimit from \"../iterableToArrayLimit/iterableToArrayLimit.js\"\nimport unsupportedIterableToArray from \"../unsupportedIterableToArray/unsupportedIterableToArray.js\"\nimport nonIterableRest from \"../nonIterableRest/nonIterableRest.js\"\n\nexport default (arr, i) =>\n  arrayWithHoles(arr) ||\n  iterableToArrayLimit(arr, i) ||\n  unsupportedIterableToArray(arr, i) ||\n  nonIterableRest()\n",
    "export const injectCSS = (cssUrl, { crossOrigin } = {}) => {\n  return new Promise((resolve, reject) => {\n    const link = document.createElement(\"link\")\n    link.rel = \"stylesheet\"\n    link.onload = resolve\n    link.onerror = reject\n    link.href = cssUrl\n    link.crossOrigin = crossOrigin\n    document.head.appendChild(link)\n  })\n}\n\nexport const nextIDLEPromise = window.requestIdleCallback\n  ? ({ timeout = 60 } = {}) => {\n      return new Promise((resolve) => {\n        window.requestIdleCallback(resolve, { timeout })\n      })\n    }\n  : () => {\n      return new Promise((resolve) => {\n        window.requestAnimationFrame(resolve)\n      })\n    }\n",
    "// eslint-disable-next-line consistent-return\nexport default (arr) => {\n  if (Array.isArray(arr)) return arr\n}\n",
    "export default function _iterableToArrayLimit(arr, i) {\n  // this is an expanded form of \\`for...of\\` that properly supports abrupt completions of\n  // iterators etc. variable names have been minimised to reduce the size of this massive\n  // helper. sometimes spec compliance is annoying :(\n  //\n  // _n = _iteratorNormalCompletion\n  // _d = _didIteratorError\n  // _e = _iteratorError\n  // _i = _iterator\n  // _s = _step\n  var _i =\n    arr == null\n      ? null\n      : (typeof Symbol !== \"undefined\" && arr[Symbol.iterator]) || arr[\"@@iterator\"]\n  if (_i == null) return\n  var _arr = []\n  var _n = true\n  var _d = false\n  var _s, _e\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value)\n      if (i && _arr.length === i) break\n    }\n  } catch (err) {\n    _d = true\n    _e = err\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]()\n    } finally {\n      if (_d) throw _e\n    }\n  }\n  return _arr\n}\n",
    "export default () => {\n  throw new TypeError(\n    \"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\",\n  )\n}\n"
  ]
}