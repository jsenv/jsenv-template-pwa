{
  "version": 3,
  "sources": [
    "../../src/boot/boot.js",
    "../../node_modules/@jsenv/core/helpers/babel/slicedToArray/slicedToArray.js",
    "../../node_modules/@jsenv/core/helpers/babel/arrayWithHoles/arrayWithHoles.js",
    "../../node_modules/@jsenv/core/helpers/babel/iterableToArrayLimit/iterableToArrayLimit.js",
    "../../node_modules/@jsenv/core/helpers/babel/nonIterableRest/nonIterableRest.js",
    "../../src/boot/boot.utils.js"
  ],
  "names": [
    "prepareApp",
    "loadBootCSSAndFonts",
    "loadApp",
    "_await",
    "value",
    "then",
    "direct",
    "Promise",
    "resolve",
    "_async",
    "f",
    "args",
    "i",
    "arguments",
    "length",
    "apply",
    "this",
    "e",
    "reject",
    "_empty",
    "arr",
    "Array",
    "isArray",
    "_i",
    "Symbol",
    "iterator",
    "_s",
    "_e",
    "_arr",
    "_n",
    "_d",
    "call",
    "next",
    "done",
    "push",
    "err",
    "return",
    "unsupportedIterableToArray",
    "TypeError",
    "nextIDLEPromise",
    "window",
    "requestIdleCallback",
    "n",
    "timeout",
    "requestAnimationFrame",
    "boot",
    "all",
    "app",
    "body",
    "result",
    "render",
    "splashscreen",
    "appIsReady",
    "race",
    "setTimeout",
    "takeOver",
    "updateSplascreenText",
    "message",
    "document",
    "querySelector",
    "innerHTML",
    "recover",
    "cssUrl",
    "crossOrigin",
    "link",
    "createElement",
    "rel",
    "onload",
    "onerror",
    "href",
    "head",
    "appendChild",
    "URL",
    "System",
    "import",
    "t",
    "fonts",
    "ready",
    "module"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/**\n * This is where you can orchestrate the loading of your application\n */\n\nimport { DEV } from \"#env\"\nimport { injectCSS, nextIDLEPromise } from \"./boot.utils.js\"\n\nconst boot = async () => {\n  const [, app] = await Promise.all([prepareApp(), loadApp()])\n  // app.render() can be very expensive so we wait a bit\n  // to let navigator an opportunity to cooldown.\n  // This should help to save battery power and RAM\n  await nextIDLEPromise()\n  app.render()\n  if (DEV) {\n    performance.measure(`App displayed`)\n  }\n  window.splashscreen.appIsReady()\n}\n\nconst prepareApp = async () => {\n  // try to load CSS + get the main fonts before displaying any text\n  // to avoid font swapping if possible\n  // give max 400ms for this\n  await Promise.race([\n    loadBootCSSAndFonts(),\n    new Promise((resolve) => setTimeout(resolve, 400)),\n  ])\n\n  // window.splashscreen.takeOver() means this code is taking responsability of the splashscreen.\n  // It prevents main.html to display <div id=\"booting_is_slow\"></div> to the user\n  window.splashscreen.takeOver()\n\n  const updateSplascreenText = (message) => {\n    const splashscreenMessageNode = document.querySelector(\n      \"#splashscreen_message\",\n    )\n    splashscreenMessageNode.innerHTML = message\n  }\n\n  updateSplascreenText(`Loading banana...`)\n  if (DEV) {\n    performance.measure(`\"loading bannana...\" displayed`)\n  }\n  await new Promise((resolve) => {\n    setTimeout(resolve, 800)\n  })\n\n  updateSplascreenText(`Loading gorilla...`)\n  if (DEV) {\n    performance.measure(`\"loading gorilla...\" displayed`)\n  }\n  await new Promise((resolve) => {\n    setTimeout(resolve, 1000)\n  })\n\n  updateSplascreenText(`Loading the entire jungle...`)\n  if (DEV) {\n    performance.measure(`\"entire jungle...\" displayed`)\n  }\n  await new Promise((resolve) => {\n    setTimeout(resolve, 1200)\n  })\n}\n\nconst loadBootCSSAndFonts = async () => {\n  try {\n    await injectCSS(new URL(\"./boot.css\", import.meta.url), {\n      crossOrigin: true,\n    })\n    if (DEV) {\n      performance.measure(`boot.css loaded`)\n    }\n  } catch (e) {\n    return\n  }\n  await document.fonts.ready\n  if (DEV) {\n    performance.measure(`fonts ready`)\n  }\n}\n\nconst loadApp = async () => {\n  const app = await import(\"../app/app.js\")\n  if (DEV) {\n    performance.measure(\"app.js imported\")\n  }\n  return app\n}\n\nawait boot()\n",
    "import arrayWithHoles from \"../arrayWithHoles/arrayWithHoles.js\"\nimport iterableToArrayLimit from \"../iterableToArrayLimit/iterableToArrayLimit.js\"\nimport unsupportedIterableToArray from \"../unsupportedIterableToArray/unsupportedIterableToArray.js\"\nimport nonIterableRest from \"../nonIterableRest/nonIterableRest.js\"\n\nexport default (arr, i) =>\n  arrayWithHoles(arr) ||\n  iterableToArrayLimit(arr, i) ||\n  unsupportedIterableToArray(arr, i) ||\n  nonIterableRest()\n",
    "// eslint-disable-next-line consistent-return\nexport default (arr) => {\n  if (Array.isArray(arr)) return arr\n}\n",
    "export default function _iterableToArrayLimit(arr, i) {\n  // this is an expanded form of \\`for...of\\` that properly supports abrupt completions of\n  // iterators etc. variable names have been minimised to reduce the size of this massive\n  // helper. sometimes spec compliance is annoying :(\n  //\n  // _n = _iteratorNormalCompletion\n  // _d = _didIteratorError\n  // _e = _iteratorError\n  // _i = _iterator\n  // _s = _step\n  var _i =\n    arr == null\n      ? null\n      : (typeof Symbol !== \"undefined\" && arr[Symbol.iterator]) || arr[\"@@iterator\"]\n  if (_i == null) return\n  var _arr = []\n  var _n = true\n  var _d = false\n  var _s, _e\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value)\n      if (i && _arr.length === i) break\n    }\n  } catch (err) {\n    _d = true\n    _e = err\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]()\n    } finally {\n      if (_d) throw _e\n    }\n  }\n  return _arr\n}\n",
    "export default () => {\n  throw new TypeError(\n    \"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\",\n  )\n}\n",
    "export const injectCSS = (cssUrl, { crossOrigin } = {}) => {\n  return new Promise((resolve, reject) => {\n    const link = document.createElement(\"link\")\n    link.rel = \"stylesheet\"\n    link.onload = resolve\n    link.onerror = reject\n    link.href = cssUrl\n    link.crossOrigin = crossOrigin\n    document.head.appendChild(link)\n  })\n}\n\nexport const nextIDLEPromise = window.requestIdleCallback\n  ? ({ timeout = 60 } = {}) => {\n      return new Promise((resolve) => {\n        window.requestIdleCallback(resolve, { timeout })\n      })\n    }\n  : () => {\n      return new Promise((resolve) => {\n        window.requestAnimationFrame(resolve)\n      })\n    }\n"
  ]
}