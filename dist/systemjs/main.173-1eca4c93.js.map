{
  "version": 3,
  "sources": [
    "../../.jsenv/out-build/best/main.173.js"
  ],
  "names": [
    "appNode",
    "splashscreenNode",
    "boot",
    "setBootingState",
    "replaceNodeVariables",
    "_t",
    "n",
    "value",
    "direct",
    "then",
    "Promise",
    "resolve",
    "r",
    "f",
    "args",
    "i",
    "arguments",
    "length",
    "apply",
    "this",
    "e",
    "reject",
    "window",
    "splashscreen",
    "takeOver",
    "appIsReady",
    "document",
    "querySelector",
    "bootStartMs",
    "Date",
    "now",
    "splashIsVisible",
    "splashout",
    "setAttribute",
    "setTimeout",
    "killSplashscreen",
    "removeAttribute",
    "style",
    "display",
    "splashInTimeout",
    "bootingIsSlowTimeout",
    "clearTimeout",
    "result",
    "splashInMs",
    "msEllapsedSinceSplashIn",
    "body",
    "msToWaitToPreventBlink",
    "recover",
    "module",
    "error",
    "errorStack",
    "stack",
    "nextBootingState",
    "data",
    "splashscreenMessageNode",
    "innerHTML",
    "variantModel",
    "variantInstance",
    "cloneNode",
    "appendChild",
    "node",
    "nodeName",
    "Array",
    "from",
    "childNodes",
    "forEach",
    "textContent",
    "replace",
    "_",
    "key",
    "hasOwnProperty"
  ],
  "mappings": "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",
  "sourcesContent": [
    "\n      import { DEV } from \"#env\"\n\n      if (DEV) {\n        const { injectDevRibbon } = await import(\"./src/dev_ribbon.js\")\n        injectDevRibbon()\n      }\n\n      const splashscreen = {\n        /*\n         * takeOver is implemented later in this script.\n         * takeOver is meant to be called by code that want to take responsability\n         * of what is displayed in the splashscreen\n         *\n         * It is used by boot/boot.js once it starts to render a different UI in the splashscreen\n         */\n        takeOver: () => {},\n        /*\n         * appIsReady is implemented later in this script.\n         * appIsReady is meant to be called once:\n         * - Code has rendered html inside <div id=\"app\"></div>\n         * - This html is ready to be displayed (css ands fonts loaded for example)\n         *\n         * It is used by app/app.js once it has rendered the HTML and font is loaded\n         */\n        appIsReady: () => {},\n      }\n      window.splashscreen = splashscreen\n\n      // When it take more than \"BOOTING_SLOW\"ms for code to call window.splashscreen.takeOver()\n      // splashscreen displays <div id=\"booting_is_slow\"> content\n      const BOOTING_SLOW = 2500\n      // When it takes less than \"SPLASHIN_DELAY\"ms for code to call window.splashscreen.appIsReady()\n      // we won't even show the splashscreen (happens on user second visit because everything is in browser cache)\n      const SPLASHIN_DELAY = 300\n      // When less than \"SPLASHOUT_MIN_INTERVAL\"ms have ellapsed since splashin animation started\n      // we will ensure \"SPLASHOUT_MIN_INTERVAL\"ms ellapses before playing the splashout animation\n      // This is to prevent a disturbing blink when code calls window.splashscreen.appIsReady() just after\n      // splashin animation\n      const SPLASHOUT_MIN_INTERVAL = 650\n\n      const appNode = document.querySelector(\"#app\")\n      const splashscreenNode = document.querySelector(\"#splashscreen\")\n\n      const BOOTING_START = \"booting_start\"\n      const BOOTING_IS_SLOW = \"booting_is_slow\"\n      const BOOTING_ERROR = \"booting_error\"\n\n      const boot = async () => {\n        const bootStartMs = Date.now()\n\n        let splashIsVisible = false\n        const splashin = () => {\n          splashscreenNode.setAttribute(\"data-splashin\", \"\")\n          splashIsVisible = true\n        }\n\n        const splashout = async () => {\n          splashscreenNode.setAttribute(\"data-splashout\", \"\")\n          await new Promise((resolve) => {\n            setTimeout(() => {\n              splashIsVisible = false\n              resolve()\n            }, 300)\n          })\n        }\n\n        const killSplashscreen = () => {\n          appNode.removeAttribute(\"data-booting\")\n          // Here splashscreen is \"killed\" with display: 'none' but it could also\n          // be removed from the DOM\n          splashscreenNode.style.display = \"none\"\n          splashIsVisible = false\n        }\n\n        const splashInTimeout = setTimeout(splashin, SPLASHIN_DELAY)\n\n        const bootingIsSlowTimeout = setTimeout(() => {\n          setBootingState(BOOTING_IS_SLOW)\n        }, BOOTING_SLOW)\n\n        window.splashscreen.takeOver = () => {\n          clearTimeout(bootingIsSlowTimeout)\n        }\n\n        window.splashscreen.appIsReady = async () => {\n          clearTimeout(splashInTimeout)\n          clearTimeout(bootingIsSlowTimeout)\n\n          if (!splashIsVisible) {\n            // app was super fast to load, splashscreen was not even displayed, cool\n            killSplashscreen()\n            return\n          }\n\n          const splashInMs = bootStartMs + SPLASHIN_DELAY\n          const msEllapsedSinceSplashIn = Date.now() - splashInMs\n\n          if (msEllapsedSinceSplashIn < SPLASHOUT_MIN_INTERVAL) {\n            const msToWaitToPreventBlink =\n              SPLASHOUT_MIN_INTERVAL - msEllapsedSinceSplashIn\n            await new Promise((resolve) => {\n              setTimeout(resolve, msToWaitToPreventBlink)\n            })\n          }\n\n          // Wait the end of the \"splashout\" animation before killing splashscreen entirely\n          await splashout()\n          killSplashscreen()\n        }\n\n        try {\n          setBootingState(BOOTING_START)\n          await import(\"./src/boot/boot.js\")\n        } catch (error) {\n          clearTimeout(bootingIsSlowTimeout)\n\n          setBootingState(BOOTING_ERROR, {\n            errorStack:\n              error.stack ||\n              `<No stack associated with this error> (Check devtools to get more info)`,\n          })\n          throw error\n        }\n      }\n\n      const setBootingState = (nextBootingState, data = {}) => {\n        const splashscreenMessageNode = document.querySelector(\n          \"#splashscreen_message\",\n        )\n        splashscreenMessageNode.innerHTML = \"\"\n        const variantModel = document.querySelector(`#${nextBootingState}`)\n        const variantInstance = variantModel.cloneNode(true)\n\n        replaceNodeVariables(variantInstance, data)\n        splashscreenMessageNode.appendChild(variantInstance)\n      }\n\n      const replaceNodeVariables = (node, data) => {\n        if (node.nodeName === \"#text\") {\n          node.textContent = node.textContent.replace(\n            /\\${(\\w*)}/g,\n            (_, key) => {\n              return data.hasOwnProperty(key) ? data[key] : \"\"\n            },\n          )\n          return\n        }\n\n        Array.from(node.childNodes).forEach((node) => {\n          replaceNodeVariables(node, data)\n        })\n      }\n\n      await boot()\n    "
  ]
}