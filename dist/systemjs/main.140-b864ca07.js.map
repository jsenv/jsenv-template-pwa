{
  "version": 3,
  "sources": [
    "../../main.140.js"
  ],
  "names": [
    "splashscreenElement",
    "document",
    "querySelector",
    "activateSplashscreenVariant",
    "variantId",
    "data",
    "activeVariantContainer",
    "innerHTML",
    "variantInstance",
    "cloneNode",
    "visitNode",
    "node",
    "nodeName",
    "textContent",
    "replace",
    "_",
    "key",
    "hasOwnProperty",
    "Array",
    "from",
    "childNodes",
    "forEach",
    "appendChild",
    "activateWaitingTimeout",
    "setTimeout",
    "mainScript",
    "onerror",
    "clearTimeout",
    "errorEventCallback",
    "errorEvent",
    "window",
    "removeEventListener",
    "message",
    "filename",
    "lineno",
    "lineNumber",
    "colno",
    "columnNumber",
    "runtimeErrorTitle",
    "runtimeErrorMessage",
    "addEventListener",
    "minTimeEllapsed",
    "Promise",
    "resolve",
    "splashscreen",
    "remove",
    "async",
    "setAttribute",
    "style",
    "display"
  ],
  "mappings": "AACM,MAAMA,oBAAsBC,SAASC,cAAc,iBAE7CC,4BAA8B,CAACC,EAAWC,EAAO,MACrD,MAAMC,EAAyBL,SAASC,cAAc,sBACtDI,EAAuBC,UAAY,GACnC,MACMC,EADeP,SAASC,cAAc,IAAIE,KACXK,WAAU,GAEzCC,EAAaC,IACK,UAAlBA,EAAKC,SACPD,EAAKE,YAAcF,EAAKE,YAAYC,QAAQ,cAAc,CAACC,EAAGC,IACrDX,EAAKY,eAAeD,GAAOX,EAAKW,GAAO,KAGhDE,MAAMC,KAAKR,EAAKS,YAAYC,SAASV,IACnCD,EAAUC,OAOhB,OAHAD,EAAUF,GAEVF,EAAuBgB,YAAYd,GAC5BA,GAKHe,uBAAyBC,YAAW,KACxCrB,4BAA4B,aAC3B,MAIGsB,WAAaxB,SAASC,cAAc,sBAC1CuB,WAAWC,QAAU,KACnBC,aAAaJ,wBACbpB,4BAA4B,yBAO9B,MAAMyB,mBAAsBC,IAC1BC,OAAOC,oBAAoB,QAASH,oBACpC,MAAMI,QAAEA,EAAOC,SAAEA,EAAUC,OAAQC,EAAYC,MAAOC,GAAiBR,EAEvEF,aAAaJ,wBACbpB,4BAA4B,uBAAwB,CAClDmC,kBAAmBL,EACf,GAAGA,KAAYE,KAAcE,IAC7B,uCACJE,oBACEP,GAAW,+EAGjBF,OAAOU,iBAAiB,QAASZ,oBAQjC,MAAMa,gBAAkB,IAAIC,SAASC,IACnCnB,WAAWmB,EAAS,QAGtBb,OAAOc,aAAe,CAGpBC,OAAQC,UAINnB,aAAaJ,wBACbO,OAAOC,oBAAoB,QAASH,0BAE9Ba,gBACNzC,oBAAoB+C,aAAa,YAAa,UAI9CvB,YAAW,KACTxB,oBAAoBgD,MAAMC,QAAU,SACnC",
  "sourcesContent": [
    "\n      const splashscreenElement = document.querySelector(\"#splashscreen\")\n\n      const activateSplashscreenVariant = (variantId, data = {}) => {\n        const activeVariantContainer = document.querySelector(\"#splashscreen-text\")\n        activeVariantContainer.innerHTML = \"\"\n        const variantModel = document.querySelector(`#${variantId}`)\n        const variantInstance = variantModel.cloneNode(true)\n\n        const visitNode = (node) => {\n          if (node.nodeName === \"#text\") {\n            node.textContent = node.textContent.replace(/\\${(\\w*)}/g, (_, key) => {\n              return data.hasOwnProperty(key) ? data[key] : \"\"\n            })\n          } else {\n            Array.from(node.childNodes).forEach((node) => {\n              visitNode(node)\n            })\n          }\n        }\n        visitNode(variantInstance)\n\n        activeVariantContainer.appendChild(variantInstance)\n        return variantInstance\n      }\n\n      // In case page takes more than 2,5s to call window.splashscreen.remove()\n      // -> activate the \"waiting-screen\"\n      const activateWaitingTimeout = setTimeout(() => {\n        activateSplashscreenVariant(\"waiting\")\n      }, 2500)\n\n      // In case browser fails to load main script\n      // -> activate the \"network-error-screen\"\n      const mainScript = document.querySelector(\"script#main-script\")\n      mainScript.onerror = () => {\n        clearTimeout(activateWaitingTimeout)\n        activateSplashscreenVariant(\"network-error-screen\")\n      }\n      // uncomment the line below to test the case of a network error\n      // mainScript.onerror();\n\n      // In case browser fails to parse or execute main script\n      // -> activate the \"runtime-error-screen\"\n      const errorEventCallback = (errorEvent) => {\n        window.removeEventListener(\"error\", errorEventCallback)\n        const { message, filename, lineno: lineNumber, colno: columnNumber } = errorEvent\n\n        clearTimeout(activateWaitingTimeout)\n        activateSplashscreenVariant(\"runtime-error-screen\", {\n          runtimeErrorTitle: filename\n            ? `${filename}:${lineNumber}:${columnNumber}`\n            : \"<No file associated with this error>\",\n          runtimeErrorMessage:\n            message || `<No message associated with this error> (Check devtools to get more info)`,\n        })\n      }\n      window.addEventListener(\"error\", errorEventCallback)\n      // if you want to test the runtime-error scenario,\n      // you can write thow new Error('test'); in ./main.js or ./src/app.js\n\n      // In case browser loads and execute very quickly main.js (which call splashscreen.remove())\n      // the splashscreen would quickly fadein + fadeout creating an ugly blink.\n      // To ensure it does not blink we wait at leat 700ms before actually removing the splashscreen\n      // Many other strategies are valid and could be preferred instead of this one.\n      const minTimeEllapsed = new Promise((resolve) => {\n        setTimeout(resolve, 700)\n      })\n\n      window.splashscreen = {\n        // window.splashscreen.remove is meant to be called by the main script\n        // once it's ready to display the user interface\n        remove: async () => {\n          // uncomment the line below to test the case of an infite loading\n          // return\n\n          clearTimeout(activateWaitingTimeout)\n          window.removeEventListener(\"error\", errorEventCallback)\n\n          await minTimeEllapsed\n          splashscreenElement.setAttribute(\"data-step\", \"loaded\")\n          // Wait the end of the \"splashout\" animation before killing splascreen entirely.\n          // Here splaschreen is \"killed\" with display: 'none' but it could also\n          // be removed from the DOM\n          setTimeout(() => {\n            splashscreenElement.style.display = \"none\"\n          }, 300)\n        },\n      }\n    "
  ],
  "file": "main.140-b864ca07.js"
}