{
  "version": 3,
  "sources": [
    "../../.jsenv/out-build/otherwise/main.172.js"
  ],
  "names": [
    "appNode",
    "splashscreenNode",
    "boot",
    "setBootingState",
    "replaceNodeVariables",
    "_e",
    "n",
    "f",
    "args",
    "i",
    "arguments",
    "length",
    "Promise",
    "resolve",
    "apply",
    "this",
    "e",
    "reject",
    "window",
    "splashscreen",
    "takeOver",
    "appIsReady",
    "document",
    "querySelector",
    "bootingIsSlowTimeout",
    "setTimeout",
    "clearTimeout",
    "minMsEllapsed",
    "removeAttribute",
    "then",
    "setAttribute",
    "style",
    "display",
    "value",
    "body",
    "recover",
    "result",
    "direct",
    "module",
    "error",
    "errorStack",
    "stack",
    "nextBootingState",
    "data",
    "splashscreenMessageNode",
    "innerHTML",
    "variantModel",
    "variantInstance",
    "cloneNode",
    "appendChild",
    "node",
    "nodeName",
    "Array",
    "from",
    "childNodes",
    "forEach",
    "textContent",
    "replace",
    "_",
    "key",
    "hasOwnProperty"
  ],
  "mappings": "8PAoBYA,EACAC,EAMAC,EAkDAC,EAcAC,EAqgBLC,EAAA,aA1hBAC,EAAA,SAAgBC,GAAAA,OACf,WAAA,IACD,IAAIC,EAAO,GAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAChDD,EAAKC,GAAKC,UAAUD,GAAAA,IAAAA,OAGbG,QAAQC,QAAQN,EAAEO,MAAMC,KAAMP,IACpC,MAAMQ,GAAAA,OACAJ,QAAQK,OAAOD,aA7EnBE,OAAOC,aAAe,CAQpBC,SAAU,aAQVC,WAAY,cAGRrB,EAAUsB,SAASC,cAAc,QACjCtB,EAAmBqB,SAASC,cAAc,iBAM1CrB,EAAAA,GAAAA,WAAAA,IAEEsB,EAAuBC,YAAW,WACtCtB,EANoB,qBAOnB,MAMHe,OAAOC,aAAaC,SAAW,WAC7BM,aAAaF,IAAAA,IAOTG,EAAgB,IAAIf,SAAQ,SAACC,GACjCY,WAAWZ,EAAS,QAAA,OAEtBK,OAAOC,aAAaE,WAAAA,GAAAA,WAAAA,OAClBK,aAAaF,GACbxB,EAAQ4B,gBAAgB,gBAkCJC,EAAAA,WA/BpB5B,EAAiB6B,aAAa,oBAAqB,IAEnDL,YAAW,WAGTxB,EAAiB8B,MAAMC,QAAU,SAChC,OAyBUC,EAhCPN,IAoCAM,EAAMJ,OACpBI,EAAQrB,QAAQC,QAAQoB,IAElBJ,EAAOI,EAAMJ,KAAKA,GAAQI,EAP3B,IAAgBA,EAAOJ,KA8dvB,SAAgBK,EAAMC,GAAAA,IAAAA,IAEvBC,EAASF,IACZ,MAAMlB,GAAAA,OACAmB,EAAQnB,GAAAA,OAEZoB,GAAUA,EAAOP,KACbO,EAAOP,UAAAA,EAAaM,GAErBC,EATD,EASCA,WAAAA,OA5fEjC,EAxCkB,iBAwErB,SAAuB8B,EAAOI,GAC/BA,OACGJ,GAASA,EAAMJ,KAAOI,EAAMJ,KAAAA,GAAejB,QAAQC,UAFrD,CA/BSyB,EAAAA,OAAO,oBAAA,SACNC,GAAAA,MACPb,aAAaF,GAEbrB,EA3CkB,gBA2Ca,CAC7BqC,WACED,EAAME,OAAAA,4EAGJF,QAIJpC,EAAkB,SAACuC,GAAAA,IAAkBC,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAO,GAG1CC,EAA0BtB,SAASC,cACvC,yBAEFqB,EAAwBC,UAAY,GAAA,IAC9BC,EAAexB,SAASC,cAAAA,IAAAA,OAAkBmB,IAC1CK,EAAkBD,EAAaE,WAAAA,GAErC5C,EAAqB2C,EAAiBJ,GACtCC,EAAwBK,YAAYF,IAGhC3C,EAAuB,SAAvBA,EAAwB8C,EAAMP,GACZ,UAAlBO,EAAKC,SAUTC,MAAMC,KAAKH,EAAKI,YAAYC,SAAQ,SAACL,GACnC9C,EAAqB8C,EAAMP,MAV3BO,EAAKM,YAAcN,EAAKM,YAAYC,QAClC,cACA,SAACC,EAAGC,GAAAA,OACKhB,EAAKiB,eAAeD,GAAOhB,EAAKgB,GAAO,SAWhDzD",
  "sourcesContent": [
    "\n      window.splashscreen = {\n        /*\n         * takeOver is implemented later in this script.\n         * takeOver is meant to be called by code that want to take responsability\n         * of what is displayed in the splashscreen\n         *\n         * It is used by boot/boot.js once it starts to render a different UI in the splashscreen\n         */\n        takeOver: () => {},\n        /*\n         * appIsReady is implemented later in this script.\n         * appIsReady is meant to be called once the app inside <div id=\"app\"></div>\n         * is ready to be displayed to the user (HTML rendered and CSS, images, fonts, ... are loaded).\n         *\n         * It is used by app/app.js once it has rendered the HTML and font is loaded\n         */\n        appIsReady: () => {},\n      }\n\n      const appNode = document.querySelector(\"#app\")\n      const splashscreenNode = document.querySelector(\"#splashscreen\")\n\n      const BOOTING_START = \"booting_start\"\n      const BOOTING_IS_SLOW = \"booting_is_slow\"\n      const BOOTING_ERROR = \"booting_error\"\n\n      const boot = async () => {\n        // In case page takes more than 2,5s to boot\n        const bootingIsSlowTimeout = setTimeout(() => {\n          setBootingState(BOOTING_IS_SLOW)\n        }, 2500)\n        // De-comment the await below to test the case where boot is slow\n        // await new Promise((resolve) => {\n        //   setTimeout(resolve, 3500)\n        // })\n\n        window.splashscreen.takeOver = () => {\n          clearTimeout(bootingIsSlowTimeout)\n        }\n\n        // In case boot main file loads and execute fast, splashscreen would\n        // fadein + fadeout too soon creating a blink.\n        // -> To prevent the blink we wait at leat 700ms before actually removing the splashscreen\n        // Other strategies are valid and could be preferred instead of this one.\n        const minMsEllapsed = new Promise((resolve) => {\n          setTimeout(resolve, 700)\n        })\n        window.splashscreen.appIsReady = async () => {\n          clearTimeout(bootingIsSlowTimeout)\n          appNode.removeAttribute(\"data-booting\")\n\n          await minMsEllapsed\n          splashscreenNode.setAttribute(\"data-booting-done\", \"\")\n          // Wait the end of the \"splashout\" animation before killing splashscreen entirely\n          setTimeout(() => {\n            // Here splashscreen is \"killed\" with display: 'none' but it could also\n            // be removed from the DOM\n            splashscreenNode.style.display = \"none\"\n          }, 300)\n        }\n\n        try {\n          setBootingState(BOOTING_START)\n          await import(\"./src/boot/boot.js\")\n        } catch (error) {\n          clearTimeout(bootingIsSlowTimeout)\n\n          setBootingState(BOOTING_ERROR, {\n            errorStack:\n              error.stack ||\n              `<No stack associated with this error> (Check devtools to get more info)`,\n          })\n          throw error\n        }\n      }\n\n      const setBootingState = (nextBootingState, data = {}) => {\n        //  bootingState = nextBootingState\n\n        const splashscreenMessageNode = document.querySelector(\n          \"#splashscreen_message\",\n        )\n        splashscreenMessageNode.innerHTML = \"\"\n        const variantModel = document.querySelector(`#${nextBootingState}`)\n        const variantInstance = variantModel.cloneNode(true)\n\n        replaceNodeVariables(variantInstance, data)\n        splashscreenMessageNode.appendChild(variantInstance)\n      }\n\n      const replaceNodeVariables = (node, data) => {\n        if (node.nodeName === \"#text\") {\n          node.textContent = node.textContent.replace(\n            /\\${(\\w*)}/g,\n            (_, key) => {\n              return data.hasOwnProperty(key) ? data[key] : \"\"\n            },\n          )\n          return\n        }\n\n        Array.from(node.childNodes).forEach((node) => {\n          replaceNodeVariables(node, data)\n        })\n      }\n\n      await boot()\n    "
  ]
}